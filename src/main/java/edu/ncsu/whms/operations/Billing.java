package edu.ncsu.whms.operations;


// Imports
import edu.ncsu.whms.ConnectionFactory;
import java.sql.*;
import java.util.Map;


/**
 * WHMS Billing operations.
 *
 * @author Jack MacDonald
 */
public class Billing {

    /**
     * SQL query to determine if there is a free bed in the hospital.
     */
    private static final String HAS_FREE_BED = "SELECT EXISTS(SELECT * FROM Beds WHERE PatientID IS NULL) AS HasFreeBed";

    /**
     * SQL Insertion statement into BillingStatements table.
     * Using place holders for values for attributes VisitID, RecipientSSN, BillingAddress and CardNumber.
     * The ID on the table is self generated by auto increment.
     * Each record on the table is linked to the Visits table by visitID.
     * Used in {@link Billing#generateBillingStatement(int, String, String, String, String)}.
     */
    private static final String GENERATE_BILLING_STATEMENT = "INSERT INTO\n" +
            "BillingStatements\n" +
            "    (VisitID, RecipientSSN, BillingAddress, PaymentMethod, CardNumber)\n" +
            "VALUES\n" +
            "    (?, ?, ?, ?, ?);\n";
    
    /**
     * SQL Insertion statement into BillingRecords table.
     * Using place holders for values for attributes Fee, MedicationCost and BillingStatementID.
     * Each record on this table is linked to BillingStatements by the BillingStatementID.
     * Used in {@link Billing#generateBillingRecord(int, int, int, String)}.
     */
    private static final String GENERATE_BILLING_RECORD = "INSERT INTO\n" +
            "BillingRecords\n" +
            "    (RegistrationFee, AccommodationFee, BillingStatementID, MedicationPrescribed)\n" +
            "VALUES\n" +
            "    (?, ?, ?, ?);";

    /**
     * SQL Update statement into BillingStatements table.
     * It has the SET statement incomplete so the attributes to update are read from the user's input.
     * Used in {@link Billing#updateBillingStatement(int, Map)}.
     */
    private static final String UPDATE_BILLING_STATEMENT_BASE = "UPDATE BillingStatements\n" +
            "SET \n";
    
    /**
     * SQL Update statement into BillingRecords table.
     * It has the SET statement incomplete so the attributes to update are read from the user's input.
     * Used in {@link Billing#updateBillingRecord(int, int, int, int, String)}.
     */
    private static final String UPDATE_BILLING_RECORD_BASE = "UPDATE BillingRecords\n" +
            "SET \n";
    
    
    /**
     * Generates a billing statement record using attribute values from the input.
     *
     * @param visitID the ID of the visit to which this billing record is linked.
     * @param recipientSSN SSN of the person paying for the bill.
     * @param billingAddress Address of the payment method.
     * @param paymentMethod Method of payment.
     * @param cardNumber Number of the card used as payment method.
     * @return Result of PreparedStatement insertion execution.
     * @throws SQLException when an error occurs on the creation of the PreparedStatement, on the types of the
     *                      attributes or on the execution of the query.
     */
    public static ResultSet generateBillingStatement(int visitID, String recipientSSN, String billingAddress, String paymentMethod,
                                                     String cardNumber) throws SQLException {

        // Get a connection to the database and execute query for medical billing.
        try (Connection conn = ConnectionFactory.getConnection()) {

            try {

                // Start transaction
                conn.setAutoCommit(false);

                // Query to see if there is a free bed
                Statement freeST = conn.createStatement();
                ResultSet freeRS = freeST.executeQuery(HAS_FREE_BED);
                freeRS.first();
                boolean hasFreeBed = freeRS.getBoolean("HasFreeBed");

                // If there is, create billing statement and commit
                if (hasFreeBed) {

                    PreparedStatement st = conn.prepareStatement(GENERATE_BILLING_STATEMENT, PreparedStatement.RETURN_GENERATED_KEYS);
                    st.setInt(1, visitID);
                    st.setString(2, recipientSSN);
                    st.setString(3, billingAddress);
                    st.setString(4, paymentMethod);
                    st.setString(5, cardNumber);
                    st.executeUpdate();

                    conn.commit();

                    return st.getGeneratedKeys();

                }
                else {

                    conn.rollback();
                    throw new SQLException("Cannot create billing statement, WolfHospital has no free capacity.");

                }

            }
            catch (SQLException e) {

                conn.rollback();
                throw e;

            }
            finally {

                conn.setAutoCommit(true);

            }

        }

    }
    
    /**
     * Generates a billing record using the given parameters for each attribute.
     *
     * @param registrationFee value for the RegistrationFee attribute.
     * @param accommodationFee value for the AccommodationFee attribute.
     * @param billingStatementID value for the BillingStatementID attribute (generated automatically, not entered by user).
     * @param medicationPrescribed Whether medication was prescribed on the billing record.
     * @return result of PreparedStatement insertion execution.
     * @throws SQLException when an error occurs on the creation of the PreparedStatement, on the types of the
     *                      attributes or on the execution of the query.
     */
    public static ResultSet generateBillingRecord(int registrationFee, int accommodationFee, int billingStatementID,
                                                  String medicationPrescribed) throws SQLException {

        // Get a connection to the database and execute query for medical billing.
        try (Connection conn = ConnectionFactory.getConnection()) {

            PreparedStatement st = conn.prepareStatement(GENERATE_BILLING_RECORD, PreparedStatement.RETURN_GENERATED_KEYS);
            st.setInt(   1, registrationFee);
            st.setInt(   2, accommodationFee);
            st.setInt(   3, billingStatementID);
            st.setString(4, medicationPrescribed);
            st.executeUpdate();
            return st.getGeneratedKeys();

        }

    }
    
    /**
     * Updates a Billing Statement. It does not necessarily update all the attributes (the given parameters can be null).
     *
     * @param id ID of the BillingStatement record being updated.
     * @param values Updated attribute values.
     * @throws SQLException when an error occurs on the creation of the PreparedStatement, on the types of the
     *                      attributes or on the execution of the query.
     */
    public static void updateBillingStatement(int id, Map<String, Object> values) throws SQLException {
        
        String statement = UPDATE_BILLING_STATEMENT_BASE;
        
        int i = 0;
        
        if (values.containsKey("VisitID")) {
            statement += "VisitID = ?";
            i++;
        }
        if (values.containsKey("RecipientSSN")) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "RecipientSSN = ?";
            i++;
        }
        if (values.containsKey("BillingAddress")) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "BillingAddress = ?";
            i++;
        }
        if (values.containsKey("PaymentMethod")) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "PaymentMethod = ?";
            i++;
        }
        if (values.containsKey("CardNumber")) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "CardNumber = ?";
        }

        statement += "\nWHERE BillingStatementID = ?;";

        // Get a connection to the database and execute query for medical billing.
        try (Connection conn = ConnectionFactory.getConnection()) {
            int count = 1;

            //When a given parameter is null or 0, it's not being updated
            PreparedStatement st = conn.prepareStatement(statement);
            if (values.containsKey("VisitID")) {
                st.setInt(count, (Integer) values.get("VisitID"));
                count++;
            }
            if (values.containsKey("RecipientSSN")) {
                st.setString(count, (String) values.get("RecipientSSN"));
                count++;
            }
            if (values.containsKey("BillingAddress")) {
                st.setString(count, (String) values.get("BillingAddress"));
                count++;
            }
            if (values.containsKey("PaymentMethod")) {
                st.setString(count, (String) values.get("PaymentMethod"));
                count++;
            }
            if (values.containsKey("CardNumber")) {
                st.setString(count, (String) values.get("CardNumber"));
                count++;
            }
            st.setInt(count, id);
            st.executeUpdate();

        }
    }
    
    
    /**
     * Updates a Billing Record. It does not necessarily update all the attributes (the given parameters can be null).
     *
     * @param id ID of the BillingRecord record being updated.
     * @param registrationFee New value for the Fee of the billing record being updated.
     * @param accommodationFee New value for the AccommodationFee of the billing record being updated.
     * @param billingStatementID ID of the Billing Statement linked to the Billing Record being updated.
     * @param medicationPrescribed Whether medication was prescribed on the billing record.
     * @throws SQLException when an error occurs on the creation of the PreparedStatement, on the types of the
     *                      attributes or on the execution of the query.
     */
    public static void updateBillingRecord(int id, int registrationFee, int accommodationFee, int billingStatementID,
                                           String medicationPrescribed) throws SQLException {
        String statement = UPDATE_BILLING_RECORD_BASE;
        int i = 0;
        if (registrationFee != 0) {
            statement += "RegistrationFee = ?";
            i++;
        }
        if (accommodationFee != 0) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "AccommodationFee = ?";
            i++;
        }
        if (billingStatementID != 0) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "BillingStatementID = ?";
            i++;
        }
        if (medicationPrescribed != null) {
            if (i > 0) {
                statement += ",\n";
            }
            statement += "MedicationPrescribed = ?";
        }

        statement += "\nWHERE BillingRecordID = ?;";

        // Get a connection to the database and execute query for medical billing.
        try (Connection conn = ConnectionFactory.getConnection()) {
            int count = 1;

            PreparedStatement st = conn.prepareStatement(statement);
            if (registrationFee != 0) {
                st.setInt(count, registrationFee);
                count++;
            }
            if (accommodationFee != 0) {
                st.setInt(count, accommodationFee);
                count++;
            }
            if (billingStatementID != 0) {
                st.setInt(count, billingStatementID);
                count++;
            }
            if (medicationPrescribed != null) {
                st.setString(count, medicationPrescribed);
                count++;
            }
            st.setInt(count, id);
            st.executeUpdate();

        }

    }

}
